services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: app
    container_name: app
    restart: on-failure
    env_file: .env
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=db
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
      - SERVER_PORT=$PORT
      - REDIS_HOST=redis
      - KAFKA_HOST=broker
    ports:
      - "3000:3000"
    depends_on:
      - broker
      - db
      - redis
    volumes:
      - .:/home/node/app
      - /home/node/app/node_modules
    networks:
      - app-network
    # entrypoint:
    #   [
    #     "/bin/sh",
    #     "-c",
    #     "./wait-for-it.sh db:27017 -- ./wait-for-it.sh redis:6379 -- ./home/node/app/node_modules/.bin/nodemon index.js",
    #   ]
  db:
    image: mongo:latest
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - dbdata:/data/db
    networks:
      - app-network

  broker:
    image: bitnami/kafka:latest
    container_name: broker
    restart: unless-stopped
    ports:
      - "49816:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "blog-zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://broker:9092,INTERNAL://broker:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:49816,INTERNAL://broker:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    depends_on:
      - blog-zookeeper
    networks:
      - app-network
  blog-zookeeper:
    image: bitnami/zookeeper:latest
    container_name: blog-zookeeper
    restart: unless-stopped
    ports:
      - "49815:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app-network
  redis:
    image: redis:latest
    ports:
      - "6381:6379"
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "10200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - app-network
networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
  node_modules:
  es_data:
